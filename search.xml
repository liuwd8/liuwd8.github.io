<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[系统分析与设计-作业1]]></title>
    <url>%2F2019%2F03%2F11%2F%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1-%E4%BD%9C%E4%B8%9A1%2F</url>
    <content type="text"><![CDATA[软件工程的定义软件工程是: 将系统化的. 严格约束的. 可量化的方法应用于软件的开发. 运行和维护，即将工程化应用于软件; 在1中所述方法的研究 解释导致 software crisis 本质原因. 表现，述说克服软件危机的方法软件危机的本质是落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题。危机以几种方式表现出来： 项目运行超预算 项目运行时间过长 软件效率很低 软件质量很差 软件通常不符合要求 项目难以管理，代码难以维护 软件从未交付过 克服危机的方法： 用现代工程的概念，原理，技术和方法进行计算机软件的开发，管理和维护，由此诞生了软件工程。 软件工程是用工程，科学和数学的原则与方法来研制，维护计算机软件的有关技术及管理方法。 软件生命周期软件生命周期(Software Life Cycle,SLC)是软件的产生直到报废或停止使用的生命周期。 SWEBoK 的 15 个知识域（An Overview of the SWEBOK Guide 请中文翻译其名称与简短说明. 软件要求软件要求KA关注软件需求的启发，协商，分析，规范和验证。在软件行业中，人们普遍认为，当这些活动表现不佳时，软件工程项目非常容易受到攻击。软件需求表达了对软件产品的需求和限制，这些需求和约束有助于解决一些现实问题。 软件设计设计被定义为两个限定的体系结构，组件，接口，以及其它的系统或部件的特性的过程中，并[即]过程的结果（IEEE 1991. 。软件设计KA涵盖了设计过程和最终产品。软件设计过程是软件工程生命周期活动，其中分析软件需求以产生软件内部结构及其行为的描述，其将作为其构造的基础。软件设计（结果. 必须描述软件体系结构 - 即软件如何分解和组织成组件以及这些组件之间的接口。它还必须描述能够构建它们的详细程度的组件。 软件构建软件构建是指通过结合详细设计，编码，单元测试，集成测试，调试和验证来详细创建工作软件。软件构建KA包括与满足其要求和设计约束的软件程序开发相关的主题。该KA涵盖了软件构建基础; 管理软件建设; 建筑技术; 实际考虑; 和软件构建工具。 软件测试测试是一项旨在评估产品质量并通过识别缺陷来改进产品质量的活动。软件测试涉及在有限的测试用例集上针对预期行为动态验证程序的行为。这些测试用例是从（通常非常大的. 执行域中选择的。软件测试KA包括软件测试的基础知识; 测试技术; 人机界面测试与评估; 与测试有关的措施; 和实际考虑。 软件维护软件维护包括增强现有功能，调整软件以在新的和修改的操作环境中运行，以及纠正缺陷。这些类别称为完善，自适应和纠正性软件维护。软件维护KA包括软件维护的基础知识（维护的性质和需求，维护类别，维护成本. ; 软件维护中的关键问题（技术问题，管理问题，维护成本估算，软件维护测量. ; 维护过程; 软件维护技术（程序理解，重新设计，逆向工程，重构，软件退役. ; 灾难恢复技术和软件维护工具。 软件配置管理系统的配置是硬件，固件，软件或这些的组合的功能和/或物理特征。它还可以被视为根据特定构建过程组合的特定版本的硬件，固件或软件项的集合，以满足特定目的。因此，软件配置管理（SCM. 是在不同时间点识别系统配置的规则，用于系统地控制配置的改变，以及在整个软件生命周期中维持配置的完整性和可追溯性。软件配置管理KA涵盖SCM过程的管理; 软件配置识别，控制，状态核算，审计; 软件发布管理和交付; 软件工程管理软件工程管理涉及规划，协调，测量，报告和控制项目或程序，以确保软件的开发和维护是系统化的，规范化的和量化的。软件工程管理KA涵盖了启动和范围定义（确定和协商要求，可行性分析以及要求的审查和修订. ; 软件项目计划（过程计划，工作量估算，成本和进度，资源分配，风险分析，质量计划. ; 软件项目制定（计量，报告和控制;收购和供应商合同管理. ; 产品验收; 审查和分析项目绩效; 项目结束; 和软件管理工具。 软件工程过程软件工程KA关注软件生命周期过程的定义，实施，评估，测量，管理和改进。涵盖的主题包括流程实施和变更（流程基础架构，流程实施和变更模型以及软件流程管理. ; 流程定义（软件生命周期模型和流程，流程定义，流程适应和流程自动化的符号. ; 过程评估模型和方法; 测量（过程测量，产品测量，测量技术和测量结果的质量. ; 和软件处理工具。 软件工程模型和方法软件工程模型和方法KA解决了涵盖多个生命周期阶段的方法; 其他KAs涵盖特定生命周期阶段的特定方法。涵盖的主题包括建模（软件工程模型的原理和属性;语法与语义与不变量;前置条件，后置条件和不变量. ; 模型类型（信息，结构和行为模型. ; 分析（分析正确性，完整性，一致性，质量和相互作用;可追溯性;以及权衡分析. ; 和软件开发方法（启发式方法，形式方法，原型方法和敏捷方法. 。 软件质量软件质量是许多SWEBOK V3 KAs中普遍存在的软件生命周期问题。此外，软件质量KA还包括软件质量的基础知识（软件工程文化，软件质量特性，软件质量的价值和成本以及软件质量改进. ; 软件质量管理流程（软件质量保证，验证和确认，审核和审核. ; 和实际考虑（缺陷表征，软件质量测量和软件质量工具. 。 软件工程专业实践软件工程专业实践关注软件工程师必须具备的专业，负责和道德的软件工程知识，技能和态度。软件工程专业实践KA涵盖专业性（专业行为，专业协会，软件工程标准，雇佣合同和法律问题. ; 道德准则; 小组动态（团队合作，认知问题复杂性，与利益相关者互动，处理不确定性和模糊性，处理多元文化环境. ; 和沟通技巧。 软件工程经济学软件工程经济学KA关注的是在业务环境中做出决策，以使技术决策与组织的业务目标保持一致。涵盖的主题包括软件工程经济学的基本原理（提案，现金流量，货币时间价值，计划视野，通货膨胀，折旧，替代和退休决策. ; 非营利性决策（成本效益分析，优化分析. ; 估计，经济风险和不确定性（估算技术，风险决策和不确定性. ; 和多属性决策（价值和衡量尺度，补偿和非补偿技术. 。 计算基础计算基础KA涵盖了提供软件工程实践所需的计算背景的基础主题。涵盖的主题包括问题解决技术，抽象，算法和复杂性，编程基础，并行和分布式计算的基础知识，计算机组织，操作系统和网络通信。 数学基础数学基础KA涵盖了提供软件工程实践所必需的数学背景的基础主题。涵盖的主题包括集合，关系和功能; 基本命题和谓词逻辑; 证明技术; 图形和树木; 离散概率; 语法和有限状态机; 和数论。 工程基础工程基础KA涵盖了提供软件工程实践所必需的工程背景的基础主题。涵盖的主题包括经验方法和实验技术; 统计分析; 测量和指标; 工程设计; 仿真与建模; 和根本原因分析。 简单解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。 Level 1 - Initial: 无序, 自发生产模式. Level 2 - Repeatable：建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。 Level 3 - Defined：已将软件管理和工程两方面的过程文档化. 标准化，并综合成该组织的标准软件过程。所有项目均使用经批准. 剪裁的标准软件过程来开发和维护软件，软件产品的生产在整个软件过程是可见的。 Level 4 - Managed：分析对软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。 Level 5 - Optimizing：过程的量化反馈和先进的新思想. 新技术促使过程持续不断改进。 用自己语言简述 SWEBok 或 CMMICMMI英文全称是Capability Maturity Model Integration，直接翻译就是能力成熟度模型。CMMI可以看作是成功企业如何做好软件的一些习惯、做法、准则等的集合，是如何做好软件的最佳实践的集合。如果企业也能按照CMMI的要求做好，那么企业就很可能成为成功的企业。公司的商业目标，简单地说两个字可以概括——“赚钱”！为了赚钱，我们有很多办法：提高质量，我们的质量不需要很高，比竞争对手高就可以了。加快进度，我们的进度也不需要很快，但至少要比竞争对手快。减少成本，成本也不必减少很多，关键是能支持公司运作，能带来利润就可以了。CMMI是为企业的商业目标服务的！既不是纯粹提高质量，也不是光增加公司的成本而不提高效益。CMMI是为了提高企业的生产力！如果贵公司实施了CMMI，而没有提高生产力的话，改进是失败的，违背CMMI的初衷的。CMMI是个好东西，我们没有做好，并不是CMMI的错，是我们没有理解好或者是执行好。要让CMMI切实为企业带来价值，难度很高。]]></content>
      <categories>
        <category>System analysis and design</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Testing</category>
      </categories>
  </entry>
</search>
